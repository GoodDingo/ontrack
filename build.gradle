buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'net.nemerosa.versioning' version '1.7.1'
    id 'nebula.os-package' version '2.2.6'
    id 'org.sonarqube' version '2.3'
}

/**
 * Profiles
 */

ext {
    documentationProfile = project.hasProperty('documentation')
}

/**
 * Meta information
 */

allprojects {
    group = 'net.nemerosa.ontrack'
    version = versioning.info.display
}

/**
 * Resolution
 */

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}


/**
 * Java projects
 */

ext {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

def javaProjects = subprojects.findAll {
    it.path != ':ontrack-web'
}

configure(javaProjects) {

    /**
     * For all Java projects
     */

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
        dependencies {
            dependency 'commons-io:commons-io:2.5'
            dependency 'org.apache.commons:commons-lang3:3.4'
            dependency 'org.projectlombok:lombok:1.16.10'
            dependency 'net.jodah:failsafe:0.9.2'
            dependency 'commons-logging:commons-logging:1.2'
            dependency 'org.apache.commons:commons-math3:3.6.1'
            dependency 'com.google.guava:guava:19.0'
            dependency 'net.sf.dbinit:dbinit:1.4.0'
            dependency 'args4j:args4j:2.33'
            dependency 'org.jgrapht:jgrapht-core:0.9.2'
            dependency 'org.kohsuke:groovy-sandbox:1.10'
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        testCompile 'org.projectlombok:lombok'
        // Testing
        testCompile 'junit:junit'
        testCompile 'org.mockito:mockito-core'
    }

    // Unit tests run with the `test` task
    test {
        include '**/*Test.class'
        reports {
            html.enabled = false
        }
    }

    // Integration tests
    task integrationTest(type: Test, dependsOn: 'test') {
        include '**/*IT.class'
        jvmArgs '-Xmx512m'
        reports {
            html.enabled = false
        }
    }

    // Acceptance tests
    task acceptanceTest(type: Test, dependsOn: 'integrationTest') {
        include '**/ACC*.class'
        ignoreFailures true
        reports {
            html.enabled = false
        }
    }

    // Javadoc

    if (documentationProfile) {
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        // Sources

        task sourceJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
    }

    // POM file

    task pomFile {
        ext.output = "${buildDir}/poms/${project.name}-${version}.pom"
        doLast {
            pom {
                project {
                    version versioning.info.display
                    name project.name
                    description project.description
                    url 'http://nemerosa.github.io/ontrack'
                    licenses {
                        license {
                            name 'The MIT License (MIT)'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                    scm {
                        url 'https://github.com/nemerosa/ontrack'
                        connection 'scm:git://github.com/nemerosa/ontrack'
                        developerConnection 'scm:git:git://github.com/nemerosa/ontrack'
                    }
                    developers {
                        developer {
                            id 'dcoraboeuf'
                            name 'Damien Coraboeuf'
                            email 'damien.coraboeuf@gmail.com'
                        }
                    }
                    dependencyManagement {
                        dependencies {
                            dependency {
                                groupId "org.springframework.boot"
                                artifactId "spring-boot-dependencies"
                                version springBootVersion
                                type "pom"
                                scope "import"
                            }
                        }
                    }
                }
            }.writeTo(output)
        }
    }

    // Archives for Javadoc and Sources

    artifacts {
        if (documentationProfile) {
            archives javadocJar
            archives sourceJar
        }
        archives file: file("${buildDir}/poms/${project.name}-${version}.pom"), type: 'pom', builtBy: pomFile
    }

    assemble.dependsOn 'pomFile'

}

/**
 * Packaging for delivery
 */

apply from: 'gradle/packaging.gradle'

/**
 * Packaging for OS
 */

apply from: 'gradle/os-packaging.gradle'

/**
 * Docker tasks
 */

apply from: 'gradle/docker.gradle'

/**
 * Acceptance tasks
 */

apply from: 'gradle/acceptance.gradle'

/**
 * Acceptance tasks for OS packaging
 */

apply from: 'gradle/acceptance-os-package.gradle'

/**
 * Publication tasks
 *
 * Standalone Gradle tasks in `gradle/publication.gradle` and in
 * `gradle/production.gradle`
 */

/**
 * General test report
 */

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` tasks in all Java subprojects
    reportOn javaProjects*.test, javaProjects*.integrationTest, javaProjects*.acceptanceTest
}

/**
 * Wrapper definition
 */

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}
