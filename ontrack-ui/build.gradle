apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'

dependencies {
    compile project(':ontrack-ui-support')
    compile project(':ontrack-ui-graphql')
    compile project(':ontrack-extension-api')
    compile project(':ontrack-extension-support')
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    runtime project(':ontrack-service')
    runtime project(':ontrack-repository-impl')
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    runtime 'com.h2database:h2'

    testCompile project(':ontrack-test-utils')
    testCompile project(':ontrack-it-utils')
    testCompile project(':ontrack-extension-api').sourceSets.test.output
    testCompile project(':ontrack-model').sourceSets.test.output
    testCompile project(':ontrack-ui-graphql').sourceSets.test.output
    testCompile 'org.codehaus.groovy:groovy-all'
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    // Additions
    runtime project(':ontrack-import-export')

    // List of extensions to include in core
    runtime project(':ontrack-extension-general')
    runtime project(':ontrack-extension-jenkins')
    runtime project(':ontrack-extension-jira')
    runtime project(':ontrack-extension-svn')
    runtime project(':ontrack-extension-artifactory')
    runtime project(':ontrack-extension-git')
    runtime project(':ontrack-extension-github')
    runtime project(':ontrack-extension-gitlab')
    runtime project(':ontrack-extension-stash')
    runtime project(':ontrack-extension-combined')
    runtime project(':ontrack-extension-ldap')
    runtime project(':ontrack-extension-stale')
    runtime project(':ontrack-extension-metrics-graphite')
    runtime project(':ontrack-extension-metrics-influxdb')
}

/**
 * Cleaning the Web resources
 */

clean {
    doLast {
        project.delete 'src/main/resources/application.properties'
        project.delete 'src/main/resources/static'
    }
}

/**
 * Copy of Web resources before packaging
 */

task copyWebResources(dependsOn: ':ontrack-web:prod') {
    doLast {
        project.copy {
            from project(':ontrack-web').tasks.prod.outputDir
            into project.file('src/main/resources/static')
        }
    }
}

/**
 * Generates the version information in a file, useable from the code
 */

task generateVersionInfo {
    doLast {
        // Amends the application.properties file with version information
        File file = project.file('src/main/resources/application.properties')
        file.text = """\
# This file is generated at build time to contain version information
# Do not edit it, do not commit it
ontrack.version.date = ${new Date().format("yyyy-MM-dd'T'HH:mm:ss")}
ontrack.version.display = ${rootProject.versioning.info.display}
ontrack.version.full = ${rootProject.versioning.info.full}
ontrack.version.branch = ${rootProject.versioning.info.branchId}
ontrack.version.build = ${rootProject.versioning.info.build}
ontrack.version.commit = ${rootProject.versioning.info.commit}
ontrack.version.source = ${rootProject.versioning.info.branch}
ontrack.version.sourceType = ${rootProject.versioning.info.branchType}
# For the /manage/info endpoint
info.app.version = ${rootProject.versioning.info.display}
info.build.date = ${new Date().format("yyyy-MM-dd'T'HH:mm:ss")}
info.build.display = ${rootProject.versioning.info.display}
info.build.full = ${rootProject.versioning.info.full}
info.build.branch = ${rootProject.versioning.info.branchId}
info.build.build = ${rootProject.versioning.info.build}
info.build.commit = ${rootProject.versioning.info.commit}
info.build.source = ${rootProject.versioning.info.branch}
info.build.sourceType = ${rootProject.versioning.info.branchType}
"""
    }
}

jar.dependsOn copyWebResources
jar.dependsOn generateVersionInfo

processResources.mustRunAfter copyWebResources
processResources.mustRunAfter generateVersionInfo

bootRun.dependsOn jar

/**
 * Spring boot packaging
 */

springBoot {
    // Allowing the declaration of external extensions, packaged using the Spring Boot Module format
    layout = 'ZIP'
}
